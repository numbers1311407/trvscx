.gradient-with-layer(@start-color, @end-color, @bg, @start-percent: 0%, @end-percent: 100%) {
  background-image: -webkit-gradient(linear, left @start-percent, left @end-percent, from(@start-color), to(@end-color)), @bg; // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(top, @start-color, @start-percent, @end-color, @end-percent), @bg; // Safari 5.1+, Chrome 10+
  background-image: -moz-linear-gradient(top, @start-color @start-percent, @end-color @end-percent), @bg; // FF 3.6+
  background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent), @bg; // Standard, IE10
  background-repeat: repeat-x;
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
}

.face {
  padding: @face-padding;
  margin: 0;
  border: 0;
  overflow: hidden;
  // .box-shadow(0 0 5px 3px rgba(0, 0, 0, 0.1));
  .gradient-with-layer(@card-overlay-start; @card-overlay-end; @card-overlay-bg);
}

html.no-csstransforms3d .face {
  padding: 80px 80px;
  width: 570px + 80px * 2;
  margin: 0 auto;
}

@media screen and (max-width: @screen-sm-max) {
  .face {
    padding: @face-sm-vertical-padding @face-padding;
    width: 570px + 40px * 2;
    margin: 0 auto;
  }
}

@media screen and (max-width: @screen-xs-max) {
  .face {
    width: 100%;
  }
}

@media screen and (max-width: (@screen-xs - 1)) {
  .face {
    padding-left: @face-xs-horizontal-padding;
    padding-right: @face-xs-horizontal-padding;
  }
}

@media screen and (min-width: @screen-md) {
  html.csstransforms3d {
    .card {
      .cardbox;
      z-index: 50;
      -webkit-perspective: 850px;
      -ms-perspective: 850px;
      -o-perspective: 850px;
      perspective: 850px;
      -moz-perspective: 1250px;
    }

    .face {
      position: absolute;
      top: 0;

      width: 100%;
      height: 100%;
      margin-bottom: 0 !important;
      // important because for small screen versions, the last face is
      // stretched to full window height.
      // TODO: Add a footer so this is unnecessary.

      .backface-visibility(hidden);
      .transform(rotate3d(0, 0, 0, 0deg));
      .transition-duration(1s);
      .transform-style(preserve-3d);
      .transition-property(box-shadow);
    }

    .card .current {
      z-index: 300;
      display: block;
      .transform(rotate3d(0, 0, 0, 0deg));
    }

    @v1: unit(@card-width);
    @v2: unit(@card-height);

    .card .topLeft {
      .transform(rotate3d(-@v1, @v2, 0, 180deg));
    }

    .card .topRight {
      .transform(rotate3d(-@v1, -@v2, 0, 180deg));
    }

    .card .bottomLeft {
      .transform(rotate3d(@v1, @v2, 0, 180deg));
    }

    .card .bottomRight {
      .transform(rotate3d(@v1, -@v2, 0, 180deg));
    }

    .topLeftHover .down {
      .transform(rotate3d(-@v1, @v2, 0, 5deg));
      .box-shadow(-10px -10px 20px rgba(0,0,0,0.1));
    }

    .topRightHover .down {
      .transform(rotate3d(-@v1, -@v2, 0, 5deg));
      .box-shadow(10px -10px 20px rgba(0,0,0,0.1));
    }

    .bottomLeftHover .down {
      .transform(rotate3d(@v1, @v2, 0, 5deg));
      .box-shadow(-10px 10px 20px rgba(0,0,0,0.1));
    }

    .bottomRightHover .down {
      .transform(rotate3d(@v1, -@v2, 0, 5deg));
      .box-shadow(10px 10px 20px rgba(0,0,0,0.1));
    }

    .down {
      .transition-duration(0.4s) !important;
    }
  }
}
